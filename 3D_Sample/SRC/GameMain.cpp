//======================================================================================//
//
//							ゲームプログラム
//
//======================================================================================//
#include		<windows.h>
#include		<stdio.h>
#include		<math.h>
#include		"MASTER/Ci-Lib.H"
#include		"Game.H"

//****************************************************************************
//	■	定義
//
//****************************************************************************

// カメラ用構造体
typedef struct {
	VEC3		Pos;
	VEC3		Look;
	float		Ang;
	float		Len;

	short		Mode;
}CAMERA;


// ボックス用構造体型
typedef struct {
	short		Flg;
	VEC3		Pos;
	VEC3		Dir;
	float		Ang;
	float		Rot;
	float		Speed;
	short		Ptn;
}OBJ;

#define		BASE_Y			0.0f			// 地面
#define		TENJYO_Y		6.0f			// 
#define		_PRESS			-0.045f			// 重力値

#define		CAM_MAX			3
#define		BOX_MAX			4

//****************************************************************************
//	■	内部使用　変数
//
//****************************************************************************
GsMESH			BASE_1;
GsMESH			BOX_1,BOX_W;

CAMERA			TCam[CAM_MAX];
OBJ					Box[BOX_MAX];

//--------------------------------------------------------------------------//
//	●	初期化		：シーンに移る時一回、変数の初期化
//
//--------------------------------------------------------------------------//

//--------------------------------------------------------------------------//
// ★　初期化
//--------------------------------------------------------------------------//
void	GameInit(void)
{

	Gs_CamPrjSet( F(PAI)/4.0f, (640.0f/480.0f), 0.1f, 1000.0f);

	TCam[0].Mode	= 0;

	// タイヤ初期化	
	Box[0].Pos		= VEC3(0.0f,0.0f,0.0f);
	Box[0].Dir		= VEC3(0.0f,0.0f,0.0f);
	Box[0].Ang		= 0;
	Box[0].Speed	= 0;
	Box[0].Ptn		= 0;
	Box[0].Flg		= ON;
}

//--------------------------------------------------------------------------//
//	●	内部処理	：シーン中の処理、現在のシーンで行う処理
//
//--------------------------------------------------------------------------//

//--------------------------------------------------------------------------//
// カメラ・ライト設定
//--------------------------------------------------------------------------//
	
// ライト-------------------------------------------------
void	GameLightTask(void)
{
	Gs_LightPosSet(0,ON,	  0.0f,	  4.0f, -15.0f);
	Gs_LightPosSet(1,ON,	 20.0f,	 10.0f,	 -5.0f);
	Gs_LightPosSet(2,ON,	-20.0f,	 10.0f,	 -5.0f);
	Gs_LightPosSet(3,ON,	  0.0f,	 20.0f,	 -2.0f);
	Gs_LightPosSet(4,ON,	  0.0f,	  0.0f,	-20.0f);
	Gs_LightPosSet(5,ON,	 10.0f,	 15.0f,	-20.0f);
	Gs_LightPosSet(6,ON,	-10.0f,	 15.0f,	-20.0f);
	Gs_LightPosSet(7,ON,	  0.0f,	  5.0f,	 15.0f);
}

// カメラ-------------------------------------------------
void	GameCameTask(void)
{
	// １カメ

	TCam[0].Pos		= MakeVec(-20,20,20,	20,20,0);
	TCam[0].Look	= Box[0].Pos;

	// ２カメ
	TCam[1].Pos		= VEC3(-20,		20,		0);
	TCam[1].Look	= VEC3(0,		4.0f,		0);

}


void	BoxTask(void)
{

	// Yaw（水平）回転
	if (Gs_GetKEY(kKEYLEFT))		Box[0].Ang	=	Box[0].Ang - 1.0f;
	if (Gs_GetKEY(kKEYRIGHT))		Box[0].Ang	=	Box[0].Ang + 1.0f;

	// 移動
	if (Gs_GetKEY(kKEYUP))			Box[0].Speed	=  0.2f;		// アクセル
	if (Gs_GetKEY(kKEYDOWN))		Box[0].Speed	= -0.1f;		// バック

	if (Gs_GetKEYtrg(kKEYSPACE))	Box[0].Dir.y	=  0.8f;	// ジャンプ


	// （ｘ、ｙ、ｚ）の移動量を算出

	Box[0].Dir	= MakeVec(0,0,Box[0].Speed,	Box[0].Ang,0,0);
		


	// NEXT POS
	Box[0].Pos		= Box[0].Pos + Box[0].Dir;


	// タイヤ回転＆慣性
	Box[0].Speed	= Box[0].Speed - (Box[0].Speed*0.02f);
	Box[0].Rot		= Box[0].Rot + Box[0].Speed*20;


	// 地面ヒット
	if (Box[0].Pos.y < BASE_Y+1.5f)	{
		Box[0].Pos.y	= BASE_Y+1.5f;
		Box[0].Dir.y	= -(Box[0].Dir.y*0.5f);
	}

}

//--------------------------------------------------------------------------//
// ★ゲームメインループ
//--------------------------------------------------------------------------//
void	GameLoop(void)
{

	BoxTask			( );

	GameCameTask	( );
}

//--------------------------------------------------------------------------//
//	●	描画		：シーン中の描画
//
//--------------------------------------------------------------------------//

//--------------------------------------------------------------------------//
//	３Ｄ描画
//--------------------------------------------------------------------------//
void	GameDraw3D(void)
{
	// BASE
	Gs_DrawModel(0,BASE_Y,0,BASE_1,	4,1,4, 0,0,0);


	// Shadow
	float	scl;

	scl = 10.0f - (Box[0].Pos.y - BASE_Y)/3.0f;
	Gs_DrawModel(Box[0].Pos.x,BASE_Y,Box[0].Pos.z,  BOX_1, scl,0.1f,scl, Box[0].Ang,0,0, ARGB(200, 10, 10, 10));

	// Tire
	Gs_DrawModel(Box[0].Pos.x,Box[0].Pos.y,Box[0].Pos.z,    BOX_1, 10,10,10, Box[0].Ang,Box[0].Rot,0, ARGB(0xff,0xff,0xff,0xff));

}

//--------------------------------------------------------------------------//
//	２Ｄ描画　後
//--------------------------------------------------------------------------//
void	GameDraw2D_B(void)
{
}

//--------------------------------------------------------------------------//
//	２Ｄ描画　前
//--------------------------------------------------------------------------//
void	GameDraw2D_F(void)
{

	Gs_DrawBox(0,0,100,100,ARGB(250,200,200,200),OFF);

}

//--------------------------------------------------------------------------//
//　★　ゲーム画面	：描画メイン
//--------------------------------------------------------------------------//
void	GameDraw(void)
{

	// ２Ｄ描画部 バック
	Gs_Begin2DBack	( );
	GameDraw2D_B	( );

	// ３Ｄ描画部
	Gs_Begin3D		( );

	// MAIN View
	GameLightTask	( );
	Gs_DrawView(GameDraw3D,0,0,640,480,			TCam[1].Pos,TCam[1].Look);

	GameLightTask	( );
	Gs_DrawView(GameDraw3D,0,0,100,100,				TCam[0].Pos,TCam[0].Look);


	// ２Ｄ描画部　フロント
	Gs_Begin2DFront	( );
	GameDraw2D_F	( );

}

//--------------------------------------------------------------------------//
//	●	ロード		：シーンに入る時、そのシーンで必要なデータの読み込み
//
//--------------------------------------------------------------------------//
short	GameLoad(void)
{
	BASE_1		= Gs_LoadXMesh("Base.X","DATA/X/");
	BOX_1		= Gs_LoadXMesh("Tire_1.X","DATA/X/");
	BOX_W		= Gs_LoadXMesh("Box_W.X","DATA/X/");
	return		GAME_SCENE;
}

//--------------------------------------------------------------------------//
//	●	後処理		：現在のシーンから抜ける時、データの破棄
//
//--------------------------------------------------------------------------//
void	GameExit(void)
{
	Gs_ReleaseMesh(BASE_1);
	Gs_ReleaseMesh(BOX_1);
}

//****************************************************************************
//	★　シーンテーブル：各シーンで呼び出される関数の登録
//****************************************************************************

SCENE_TBL	GameSceneTbl = {
		GameLoad,
		GameInit,
		GameLoop,
		GameDraw,
		GameExit
};

//======================================================================================//
//							EOP															//
//======================================================================================//
